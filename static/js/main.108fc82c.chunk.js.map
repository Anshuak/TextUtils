{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","textAreaStyle","backgroundColor","color","placeholderTextColor","useState","text","setText","heading","rows","value","placeholder","onChange","e","target","style","disabled","length","upperText","toUpperCase","showAlert","lowerText","toLowerCase","newText","split","join","t","document","getElementById","select","navigator","clipboard","writeText","wordsSplit","wordCount","forEach","ele","getNumberOfWords","Alert","height","alert","role","charAt","slice","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.108fc82c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"form-inline my-2 my-lg-0\">\r\n            <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n          </form> */}\r\n            <div className=\"custom-control custom-switch\">\r\n              <input type=\"checkbox\" className=\"custom-control-input\" onClick={props.toggleMode} id=\"customSwitch1\"/>\r\n              <label className={`custom-control-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"customSwitch1\">Enable Dark Mode</label>\r\n            </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set default title\",\r\n    aboutText: \"About\"\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let upperText = text.toUpperCase();\r\n        setText(upperText);\r\n        props.showAlert(\"Text is transformed to UpperCase\",\"success\");\r\n    }\r\n\r\n    const handleLowClick = ()=>{\r\n        let lowerText = text.toLowerCase();\r\n        setText(lowerText);\r\n        props.showAlert(\"Text is transformed to LowerCase\",\"success\");\r\n    }\r\n\r\n    const handleChange = (e)=>{\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const handleClearText = ()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Text is cleared\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpace = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space is removed\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        let t = document.getElementById('exampleFormControlTextarea1');\r\n        t.select();\r\n        navigator.clipboard.writeText(t.value);\r\n        props.showAlert(\"Text is copied\",\"success\");\r\n    }\r\n    \r\n\r\n    const getNumberOfWords = ()=>{\r\n        const wordsSplit = text.split(\" \");\r\n        let wordCount = 0;\r\n        wordsSplit.forEach((ele)=>{\r\n            if(ele!==\"\")\r\n                wordCount+=1;\r\n        });\r\n        return wordCount;\r\n    }\r\n    const textAreaStyle = {\r\n        backgroundColor: props.mode==='light'?'white':'#06203c',\r\n        color: props.mode==='light'?'black':'white',\r\n        placeholderTextColor: 'red'\r\n    }\r\n    \r\n    const [text,setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n    \r\n            <div className=\"container\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"8\" value={text} placeholder=\"Enter your text here!\" onChange={handleChange} style={textAreaStyle}  ></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleClearText}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2>Text Summary</h2>\r\n                <p>{getNumberOfWords()} Words and {text.length} Characters</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:\"Enter the text above to see the preview\"}</p>   \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{height: '50px'}}> \r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type.charAt(0).toUpperCase()+props.alert.type.slice(1)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n ","import './App.css';\r\nimport React,{useState} from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport Alert from './components/Alert';\r\n// import About from './components/About';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode,setMode] = useState('light');\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    });\r\n\r\n    setTimeout(()=>{\r\n      setAlert(null);\r\n    },1500)\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode==='light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#06203c';\r\n      document.body.style.color = 'white';\r\n      showAlert(\"Dark mode has been enabled\",'success');\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      document.body.style.color = 'black';\r\n      showAlert(\"Light mode has been enabled\",'success');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n        <Navbar title=\"TextUtil\" mode={mode} toggleMode={toggleMode}/>\r\n        <Alert alert={alert}/>\r\n        <div className=\"container my-3\">\r\n        {/* <Switch>\r\n          <Route exact path='/'> */}\r\n            <TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert}/>\r\n          {/* </Route>\r\n          <Route exact path='/about'>\r\n            <About/>\r\n          </Route>\r\n        </Switch> */}\r\n        </div>\r\n      {/* </Router> */}\r\n     \r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}